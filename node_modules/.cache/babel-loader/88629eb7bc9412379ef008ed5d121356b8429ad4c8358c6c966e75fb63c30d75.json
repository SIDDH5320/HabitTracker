{"ast":null,"code":"// redux toolkit functions to create slice and async thunk\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n// list of image url's to render new image on home screen every time the page re-renders\nimport { DisplayImage } from \"../../Data/DisplayImage\";\n\n// initial state of redux state\nconst initialState = {\n  //  list of all the habits selected by an user\n  habits: [],\n  // to show new quote on home screen\n  quote: {},\n  // to know whether user clicked on any habit in suggestion list on home screen\n  suggestionSelected: null,\n  // to show status of a habit on \"Your habits\" page\n  showStatus: null,\n  // image url to show image on home page\n  displayImageUrl: ''\n};\n\n// fetching list of quotes to show on screen \nexport const quoteFetchThunk = createAsyncThunk('quotes', async () => {\n  // fetching the quote\n  const response = await fetch('https://type.fit/api/quotes');\n  const data = await response.json();\n  // passing data to extrareducer\n  return data;\n});\n\n// creating Slice to create reducer and extraReducer\nconst habitSlice = createSlice({\n  // name\n  name: 'habitTracker',\n  // initial State of Slice\n  initialState,\n  // list of reducers\n  reducers: {\n    // add a new habit to Habits array\n    addHabit: (state, action) => {\n      state.habits = [...state.habits, action.payload];\n      state.showStatus = null;\n    },\n    /* if user click on a habit suggestion add it inside the value of variable so that \r\n       later it can be added in input tag of \"ADD HABIT\" section */\n    setSuggestionSelected: (state, action) => {\n      // store the habit\n      state.suggestionSelected = action.payload;\n    },\n    // to show stats of a habit when user click on a habit from his selected habit list\n    setShowStatus: (state, action) => {\n      // store the habit\n      state.showStatus = action.payload;\n    },\n    // toggle the status of a habit on a specific day\n    //  done , not done , pending \n    toggleHabitStatus: (state, action) => {\n      // getting values passed in the function \n      // habitIndex = index of habit \n      // dayIndex = index of day\n      // status = status of the habit {true = done, false = not done, null = pending}\n      const {\n        habitIndex,\n        dayIndex,\n        status\n      } = action.payload;\n\n      // this function works in case of \"screen below medium width\"\n      // if showStaus doesn't has the current click habit then store the habit from habit list\n      if (state.showStatus === null) {\n        state.showStatus = state.habits[habitIndex];\n      }\n\n      // if the passed status if true, set habit as done\n      if (status) {\n        // if already done then return\n        if (state.showStatus.weekStatus[dayIndex]) {\n          return;\n        }\n        // increase the number of days on which task is done\n        state.showStatus.completedDays++;\n      }\n      // if the passed status is false, set habit as not done\n      else if (status === false) {\n        // if already not done, return\n        if (state.showStatus.weekStatus[dayIndex] === false) {\n          return;\n        }\n        // if the task was previously done\n        else if (state.showStatus.weekStatus[dayIndex]) {\n          // decrease the number of task done days\n          state.showStatus.completedDays--;\n        }\n      }\n      // if passed status is null, set as pending habit\n      else {\n        // if already pending return\n        if (state.showStatus.weekStatus[dayIndex] === null) {\n          return;\n        }\n        // if the previous status was done\n        else if (state.showStatus.weekStatus[dayIndex]) {\n          // decrease the number of task done days\n          state.showStatus.completedDays--;\n        }\n      }\n\n      // set the status of task as passed in the function\n      state.showStatus.weekStatus[dayIndex] = status;\n      // update the habits array { remove the old value of habit }\n      const newHabits = state.habits.filter(habit => habit.id !== state.showStatus.id);\n      state.habits = newHabits;\n      // append the changed status task in new habit list\n      state.habits = [...state.habits, state.showStatus];\n    }\n  },\n  // extraReducer\n  extraReducers: builder => {\n    // when quote fetching is completed by the above async thunk function\n    builder.addCase(quoteFetchThunk.fulfilled, (state, action) => {\n      // get the array of all the fetched quotes\n      const data = [...action.payload];\n      // getting index randomly to show a random quote on each page render\n      const index = Math.trunc(Math.random() * 12);\n      // store the random quote in quote object\n      state.quote = {\n        ...data[index]\n      };\n      // also store the image url form DisplayImage array randomly\n      state.displayImageUrl = DisplayImage[index].url;\n    });\n  }\n});\n\n// export the habitReducer to create the store and accessing the state\nexport const habitReducer = habitSlice.reducer;\n\n// exporting all the actions to use\nexport const {\n  addHabit,\n  setSuggestionSelected,\n  setShowStatus,\n  toggleHabitStatus\n} = habitSlice.actions;\n\n// exporting habitReducer's state to use state outside  \nexport const habitSelector = state => state.habitReducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","DisplayImage","initialState","habits","quote","suggestionSelected","showStatus","displayImageUrl","quoteFetchThunk","response","fetch","data","json","habitSlice","name","reducers","addHabit","state","action","payload","setSuggestionSelected","setShowStatus","toggleHabitStatus","habitIndex","dayIndex","status","weekStatus","completedDays","newHabits","filter","habit","id","extraReducers","builder","addCase","fulfilled","index","Math","trunc","random","url","habitReducer","reducer","actions","habitSelector"],"sources":["C:/Users/SIDDHI KUMAR/OneDrive/Desktop/Habit Trackker/src/Redux/Reducer/habitReducer.js"],"sourcesContent":["\r\n// redux toolkit functions to create slice and async thunk\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// list of image url's to render new image on home screen every time the page re-renders\r\nimport { DisplayImage } from \"../../Data/DisplayImage\";\r\n\r\n\r\n// initial state of redux state\r\nconst initialState = { \r\n                    //  list of all the habits selected by an user\r\n                    habits:[],\r\n                    // to show new quote on home screen\r\n                    quote:{},\r\n                    // to know whether user clicked on any habit in suggestion list on home screen\r\n                    suggestionSelected:null,\r\n                    // to show status of a habit on \"Your habits\" page\r\n                    showStatus:null,\r\n                    // image url to show image on home page\r\n                    displayImageUrl:'' \r\n                }\r\n\r\n\r\n// fetching list of quotes to show on screen \r\nexport const quoteFetchThunk = createAsyncThunk(\r\n    'quotes',\r\n    async () =>{\r\n        // fetching the quote\r\n        const response = await fetch('https://type.fit/api/quotes');\r\n        const data = await response.json();\r\n        // passing data to extrareducer\r\n        return data;\r\n    }\r\n)\r\n\r\n\r\n\r\n// creating Slice to create reducer and extraReducer\r\nconst habitSlice = createSlice({\r\n    // name\r\n    name:'habitTracker',\r\n    // initial State of Slice\r\n    initialState,\r\n    // list of reducers\r\n    reducers:{\r\n        // add a new habit to Habits array\r\n        addHabit:(state,action) => {\r\n            state.habits = [...state.habits,action.payload];\r\n            state.showStatus = null;\r\n        },\r\n        /* if user click on a habit suggestion add it inside the value of variable so that \r\n           later it can be added in input tag of \"ADD HABIT\" section */\r\n        setSuggestionSelected:(state,action)=> {\r\n            // store the habit\r\n            state.suggestionSelected = action.payload;\r\n        },\r\n        // to show stats of a habit when user click on a habit from his selected habit list\r\n        setShowStatus:(state,action) => {\r\n            // store the habit\r\n            state.showStatus = action.payload;\r\n        },\r\n        // toggle the status of a habit on a specific day\r\n        //  done , not done , pending \r\n        toggleHabitStatus:(state,action) => {\r\n            // getting values passed in the function \r\n            // habitIndex = index of habit \r\n            // dayIndex = index of day\r\n            // status = status of the habit {true = done, false = not done, null = pending}\r\n            const {habitIndex,dayIndex,status} = action.payload;\r\n            \r\n            // this function works in case of \"screen below medium width\"\r\n            // if showStaus doesn't has the current click habit then store the habit from habit list\r\n            if(state.showStatus === null){\r\n                state.showStatus = state.habits[habitIndex];\r\n            }\r\n\r\n            // if the passed status if true, set habit as done\r\n            if(status){\r\n                // if already done then return\r\n                if(state.showStatus.weekStatus[dayIndex]){\r\n                    return;\r\n                }\r\n                // increase the number of days on which task is done\r\n                state.showStatus.completedDays++;\r\n            }\r\n            // if the passed status is false, set habit as not done\r\n            else if( status === false){\r\n                // if already not done, return\r\n                if(state.showStatus.weekStatus[dayIndex] === false){\r\n                    return;\r\n                }\r\n                // if the task was previously done\r\n                else if(state.showStatus.weekStatus[dayIndex]){\r\n                    // decrease the number of task done days\r\n                    state.showStatus.completedDays--;\r\n                }\r\n            }\r\n            // if passed status is null, set as pending habit\r\n            else{\r\n                // if already pending return\r\n                if(state.showStatus.weekStatus[dayIndex] === null){\r\n                    return;\r\n                }\r\n                // if the previous status was done\r\n                else if(state.showStatus.weekStatus[dayIndex]){\r\n                    // decrease the number of task done days\r\n                    state.showStatus.completedDays--;\r\n                }\r\n            }\r\n            \r\n            // set the status of task as passed in the function\r\n            state.showStatus.weekStatus[dayIndex] = status;\r\n            // update the habits array { remove the old value of habit }\r\n            const newHabits = state.habits.filter((habit) => habit.id !== state.showStatus.id);\r\n            state.habits = newHabits;\r\n            // append the changed status task in new habit list\r\n            state.habits = [...state.habits, state.showStatus];\r\n        }\r\n    },\r\n    // extraReducer\r\n    extraReducers:(builder)=>{\r\n        // when quote fetching is completed by the above async thunk function\r\n        builder.addCase(quoteFetchThunk.fulfilled, (state,action) => {\r\n            // get the array of all the fetched quotes\r\n            const data = [...action.payload];\r\n            // getting index randomly to show a random quote on each page render\r\n            const index = Math.trunc(Math.random() * 12);\r\n            // store the random quote in quote object\r\n            state.quote = {...data[index]};\r\n            // also store the image url form DisplayImage array randomly\r\n            state.displayImageUrl = DisplayImage[index].url;\r\n        })\r\n    }\r\n});\r\n\r\n\r\n// export the habitReducer to create the store and accessing the state\r\nexport const habitReducer = habitSlice.reducer;\r\n\r\n// exporting all the actions to use\r\nexport const { addHabit, setSuggestionSelected, \r\n                setShowStatus, toggleHabitStatus } = habitSlice.actions;\r\n\r\n\r\n// exporting habitReducer's state to use state outside  \r\nexport const habitSelector = (state) => state.habitReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}